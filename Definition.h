#ifndef DEFINITION_H
#define DEFINITION_H

#include <fstream>
#include <Windows.h>
#include <iostream>

#define MS_PER_UPDATE 1

#define MAP_SQR_X_DIMENSIONS 40
#define MAP_SQR_Y_DIMENSIONS 40

#define MAP_VERTICAL_OFFSET -500
#define MAP_HORIZONTAL_OFFSET 700 

/*	main	*/
#define MS_PER_UPDATE 1

/*	Terrain.h	*/
#define SQUARE_WIDTH 82
#define SQUARE_HEIGHT 40
#define TEXTURE_WIDTH 82
#define TEXTURE_HEIGHT 40

enum eDirection
{
	NORTH,
	WEST,
	SOUTH,
	EAST
};

enum SquareType
{
	TYPE_SENDER,
	TYPE_RECEIVER,
	TYPE_SWITCHER,
	TYPE_OTHER,

	TYPE_BUILDING_NOT_HOME,
	TYPE_BUILDING_HOME,

	TYPE_TERRAIN,
	TYPE_SENDER_ERROR
};

/*	TextureButton.h	*/
#define MAX_SUB_BUTTON 14
#define MAX_BUTTON 14

#define BUTTON_WIDTH 100
#define BUTTON_HEIGHT 100

enum TileType
{
	GRID,
	BUTTON_ACTIVE,
	BUTTON_NONACTIVE,
	BUTTON_HOVERED,
	POINTER,
	WOOD_GRAIN,
	BLANK,
	ROAD_HORIZONTAL,
	ROAD_VERTICAL,
	ROAD_CORNER_NW,
	ROAD_CORNER_NE,
	ROAD_CORNER_WS,
	ROAD_CORNER_ES,
	ROAD_T_NORTH,
	ROAD_T_WEST,
	ROAD_T_SOUTH,
	ROAD_T_EAST,
	ROAD_END_NORTH,
	ROAD_END_WEST,
	ROAD_END_SOUTH,
	ROAD_END_EAST,
	ROAD_CROSSROAD,
	ROAD,

	ARROW_NORTH,
	ARROW_WEST,
	ARROW_SOUTH,
	ARROW_EAST,
	SWITCHER_NORTH,
	SWITCHER_WEST,
	SWITCHER_SOUTH,
	SWITCHER_EAST,
	STARTING_POINT,
	STARTING_POINT_ERROR,
	ENDING_POINT,

	BUTTON_NEW,
	BUTTON_NEW_ACTIVE,
	BUTTON_LOAD,
	BUTTON_LOAD_ACTIVE,
	BUTTON_SAVE,
	BUTTON_SAVE_ACTIVE,
	BUTTON_HOME,
	BUTTON_HOME_ACTIVE,
	LEFT_BAR,
	RIGHT_BAR,
	CALLOUT,
	PLAYER1,
	PLAYER2,
	PLAYER3,

	CONCRETE,
	GRASS,
	GRANITE_1,
	GRANITE_2,
	BEACH_NORTH,
	BEACH_WEST,
	BEACH_EAST,
	BEACH_SOUTH,
	BEACH_CORNER_NW,
	BEACH_CORNER_NE,
	BEACH_CORNER_WS,
	BEACH_CORNER_ES,
	SEA,

	RIVER_GRASS_SOUTH,
	RIVER_GRASS_NORTH,
	RIVER_GRASS_EAST,
	RIVER_GRASS_WEST,
	RIVER_CORNER_NE,
	RIVER_CORNER_NW,
	RIVER_CORNER_ES,
	RIVER_CORNER_WS,
	GRASS_CORNER_WS,
	GRASS_CORNER_NE,
	GRASS_CORNER_ES,
	GRASS_CORNER_NW,
	GRASS_SIDE_WS,
	WATER_SIDE_NE,
	GRASS_SIDE_NE,
	WATER_SIDE_WS,
	GRASS_SIDE_ES,
	WATER_SIDE_NW,
	GRASS_SIDE_NW,
	WATER_SIDE_ES,
	MARBLE,
	SAND,
	SAND_GRASS,

	TREE_FOUR,
	TREE_ROCK_LEFT,
	TREE_ROCK_RIGHT,
	TREE_BIG_SMALL,
	TREE_LEAFLESS,
	TREE_LEAFFULL,
	TREE_LEAFFULL_ROCK_SMALL,
	WOOD,
	TREE_WOOD,
	ROCK_BIG,
	ROCK_BIG_TREE,

	FENCE_DOUBLE_1,
	FENCE_DOUBLE_2,
	FENCE_DOUBLE_3,
	FENCE_DOUBLE_4,
	FENCE_SINGLE_1,
	FENCE_SINGLE_2,
	FENCE_SINGLE_3,
	FENCE_SINGLE_4,
	FLOWER_UNKNOWN_1,
	FLOWER_UNKNOWN_2,
	FLOWER_UNKNOWN_3,
	FLOWER_UNKNOWN_4,
	FLOWER_SMALL_RED_1,
	FLOWER_SMALL_YELLOW_1,
	FLOWER_SMALL_RED_2,
	FLOWER_SMALL_YELLOW_2,
	ROCK_TWO,
	TREE_COCO_LEFT,
	TREE_COCO_RIGHT,
	TREE_COCO_ROCK,
	TREE_COCO_TWO_ROCK,
	TREE_COCO_TWO,
	TREE_COCO_THREE,
	FLOWER_RED_FOUR,
	GRASS_TALL,
	TREE_LEAF_RED,
	TREE_LEAF_YELLOW,
	TREE_LEAF_GREEN,
	TREE_UNKNOWN_1,
	GRASS_UNKNOWN,
	TREE_UNKNOWN_2,

	//TYPE_HOME
	BUILDING_KEBAB,
	BUILDING_BANK_1,
	BUILDING_BANK_2,
	BUILDING_RESTAURANT,
	BUILDING_MOTEL,
	BUILDING_PRISON,

	BUILDING_NEW_HOME_1,
	BUILDING_NEW_HOME_2,
	BUILDING_NEW_HOME_3,
	BUILDING_NEW_HOME_4,
	BUILDING_NEW_HOME_5,
	BUILDING_NEW_HOME_6,
	BUILDING_NEW_HOME_7,

	MENU_BACKGROUND,
	CAMPAIGN,
	MAP_GENERATOR,
	CUSTOM_MODE,
	CREDIT,
	QUIT,
	INSTRUCTION,
	PLAYGAME,

	CAMPAIGN_ACTIVE,
	MAP_GENERATOR_ACTIVE,
	CUSTOM_MODE_ACTIVE,
	CREDIT_ACTIVE,
	QUIT_ACTIVE,
	INSTRUCTION_ACTIVE,
	PLAYGAME_ACTIVE,

	BACK,
	BACK_ACTIVE,
	CANCEL,
	CANCEL_ACTIVE,
	LOAD,
	LOAD_ACTIVE,
	SAVE,
	SAVE_ACTIVE,
	SAVEDIALOG,
	TEXTBOX,
	TEXTBOX_ACTIVE,

	LOAD_BACKGROUND,
	PREV,
	PREV_ACTIVE,
	NEXT,
	NEXT_ACTIVE,
	EXIT,
	EXIT_ACTIVE,
	ACTIVEBUTTON,
	NONE_ACTIVEBUTTON,
	INSTRUCTIONBACKGROUND,

	PAUSE,
	PAUSE_ACTIVE,
	RESUME,
	RESUME_ACTIVE,
	PLAY_QUIT,
	PLAY_QUIT_ACTIVE,
	NEW_GAME,
	NEW_GAME_ACTIVE,

	PAUSE_BACKGROUND,

	PLAY_GAME,
	PLAY_GAME_ACTIVE,
	BACK_TO_MENU,
	BACK_TO_MENU_ACTIVE,
	BACK_FROM_PLAY_TO_MENU,
	BACK_FROM_PLAY_TO_MENU_ACTIVE,

	TLP,

	MONEY_PLUS,
	MONEY_MINUS,

	STAR,
	CUP,

	CREDIT_BACKGROUND,
	ERROR_BACKGROUND
};

enum ButtonState
{
	NONACTIVE,
	HOVER,
	ACTIVE
};

inline bool exists_test(const std::wstring& name) {
	std::wifstream f(name);
	if (f.good()) {
		f.close();
		return true;
	}
	else {
		f.close();
		return false;
	}
}

#define PACKAGE_SPEED 0.002f

#endif

